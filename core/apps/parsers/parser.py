import re

import pandas as pd
from PyPDF2 import PdfReader


def extract_last_number(text):
    # Удаляем строку "Стр. x из y", если она есть
    cleaned_text = re.sub(r'Стр\.\s*\d+\s*из\s*\d+', '', text)
    # Извлекаем все числа из очищенного текста
    numbers = re.findall(r'\d+', cleaned_text)
    # Преобразуем найденные числа из строк в целые числа
    numbers = [int(num) for num in numbers]
    # Возвращаем последнее число, если список не пустой
    return numbers[-1] if numbers else None


def extract_text_from_pdf(pdf_path):
    reader = PdfReader(pdf_path)
    text = ""
    for page_num, page in enumerate(reader.pages, start=1):
        page_text = page.extract_text()
        text += page_text + "\n"  # Добавляем перенос строки между страницами
    return text


def clean_category(category):
    # Удаляем даты в формате DD.MM.YYYY
    category = re.sub(r'\d{2}\.\d{2}\.\d{4}', '', category)
    # Удаляем коды стран (например, 'ФР')
    category = re.sub(r'\b[A-Z]{1,3}\b', '', category)
    # Оставляем 'ФЕДЕРАЛЬНЫЙ ОКРУГ)' для сохранения в названии мероприятия
    # Удаляем лишние пробелы и дефисы, оставляя возрастные рамки
    category = re.sub(r'\s+', ' ', category)
    category = re.sub(r'\s*-\s*', ' - ', category)  # Обеспечиваем пробелы вокруг дефиса
    category = category.strip()
    return category


# Список известных стран
country_list = [
    "РОССИЯ", "ФРАНЦИЯ", "США", "КИТАЙ", "ГЕРМАНИЯ", "ИТАЛИЯ", "ЯПОНИЯ",
    "КАНАДА", "БЕЛАРУСЬ", "УКРАИНА", "ТУРЦИЯ", "ИСПАНИЯ", "РУМЫНИЯ",
    "ПОЛЬША", "РОССИЙСКАЯ ФЕДЕРАЦИЯ", "ИЗРАИЛЬ", "БРАЗИЛИЯ", "ИНДИЯ",
    "ЮЖНАЯ КОРЕЯ", "ИНДОНЕЗИЯ", "ЕГИПЕТ", "НОВАЯ ЗЕЛАНДИЯ", "ТАЙВАНЬ",
    "ТАДЖИКИСТАН", "КАЗАХСТАН", "ФИНЛЯНДИЯ", "ШВЕЙЦАРИЯ", "ГРУЗИЯ",
    "БОЛГАРИЯ", "ЧЕШСКАЯ РЕСПУБЛИКА", "НЕДЕРЛАНДЫ", "БЕЛЬГИЯ", "ВЕНГРИЯ",
    "СТРАНА НЕ УКАЗАНА"
]

# Обработка списка видов спорта
sports_text = """
АВИАМОДЕЛЬНЫЙ СПОРТ,АВИАЦИОННЫЕ ГОНКИ,АВТОМОБИЛЬНЫЙ СПОРТ,
АЙКИДО,АКРОБАТИЧЕСКИЙ РОК-Н-РОЛЛ,АЛЬПИНИЗМ,
АМЕРИКАНСКИЙ ФУТБОЛ,АРМРЕСТЛИНГ,БАДМИНТОН,БАСКЕТБОЛ,БЕЙСБОЛ,БИАТЛОН,БИЛЬЯРДНЫЙ СПОРТ,
БОБСЛЕЙ,БОДИБИЛДИНГ,БОКС,БОРЬБА НА ПОЯСАХ,БОУЛИНГ,БРЕЙКИНГ,ВЕЛОСИПЕДНЫЙ СПОРТ,
ВЕРТОЛЕТНЫЙ СПОРТ,ВОДНОЕ ПОЛО,ВОДНОЛЫЖНЫЙ СПОРТ,ВОДНО-МОТОРНЫЙ СПОРТ,
ВОЗДУХОПЛАВАТЕЛЬНЫЙ СПОРТ,ВОЛЕЙБОЛ,
ВОСТОЧНОЕ БОЕВОЕ ЕДИНОБОРСТВО,ВСЕСТИЛЕВОЕ КАРАТЭ,
ГАНДБОЛ,ГИРЕВОЙ СПОРТ,ГО,ГОЛЬФ,ГОНКИ ДРОНОВ (БЕСПИЛОТНЫХ ВОЗДУШНЫХ СУДОВ),
ГОНКИ С ПРЕПЯТСТВИЯМИ,ГОРНОЛЫЖНЫЙ СПОРТ,ГОРОДОШНЫЙ СПОРТ,
ГРЕБЛЯ НА БАЙДАРКАХ И КАНОЭ,ГРЕБНОЙ СЛАЛОМ,ГРЕБНОЙ СПОРТ,ДЖИУ-ДЖИТСУ,
ДАРТС,ДЗЮДО,ЕЗДОВОЙ СПОРТ,КАРАТЭ,КЕНДО,
КЁРЛИНГ,КИКБОКСИНГ,КИНОЛОГИЧЕСКИЙ СПОРТ,КИОКУСИНКАЙ,КИОКУШИН,
КОМПЬЮТЕРНЫЙ СПОРТ,КОННЫЙ СПОРТ,КОНЬКОБЕЖНЫЙ СПОРТ,КУДО,ЛАПТА,
ЛЕГКАЯ АТЛЕТИКА,ЛЫЖНОЕ ДВОЕБОРЬЕ,ЛЫЖНЫЕ ГОНКИ,МАС-РЕСТЛИНГ,
МИКРОФУТЗАЛ,МОРСКОЕ МНОГОБОРЬЕ,МОТОЦИКЛЕТНЫЙ СПОРТ,МУАЙТАЙ,НАРДЫ,
НАСТОЛЬНЫЙ ТЕННИС,ПАРАШЮТНЫЙ СПОРТ,ПАРУСНЫЙ СПОРТ,ПАУЭРЛИФТИНГ,
ПИЛОННЫЙ СПОРТ,ПЛАВАНИЕ,ПЛАНЕРНЫЙ СПОРТ,ПОДВОДНЫЙ СПОРТ,ПОЛИАТЛОН,
ПРАКТИЧЕСКАЯ СТРЕЛЬБА,ПРЫЖКИ В ВОДУ,ПРЫЖКИ НА БАТУТЕ,
ПРЫЖКИ НА ЛЫЖАХ С ТРАМПЛИНА,ПУЛЕВАЯ СТРЕЛЬБА,ПЭЙНТБОЛ,
РАДИОСПОРТ,РАФТИНГ,РЕГБИ,РОЛЛЕР СПОРТ,РОУП СКИППИНГ (СПОРТИВНАЯ СКАКАЛКА),
РУКОПАШНЫЙ БОЙ,РЫБОЛОВНЫЙ СПОРТ,САВАТ,САМБО,САМОЛЕТНЫЙ СПОРТ,
САННЫЙ СПОРТ,СЕВЕРНОЕ МНОГОБОРЬЕ,СЕРФИНГ,СИЛОВОЙ ЭКСТРИМ,
СИНХРОННОЕ ПЛАВАНИЕ,СКАЛОЛАЗАНИЕ,ЭСТЕТИЧЕСКАЯ ГИМНАСТИКА,ШАШКИ,
ШАХМАТЫ,ЧИР СПОРТ,ХУДОЖЕСТВЕННАЯ ГИМНАСТИКА,ХОККЕЙ С МЯЧОМ,
ХОККЕЙ НА ТРАВЕ,ХОККЕЙ,ФУТБОЛ ЛИЦ С ЗАБОЛЕВАНИЕМ ЦП,
ФУТБОЛ,ФУНКЦИОНАЛЬНОЕ МНОГОБОРЬЕ,ФРИСТАЙЛ,ФЛОРБОЛ,
ФИТНЕС-АЭРОБИКА,ФИДЖИТАЛ СПОРТ (ФУНКЦИОНАЛЬНО-ЦИФРОВОЙ СПОРТ),
ФИГУРНОЕ КАТАНИЕ НА КОНЬКАХ,ФЕХТОВАНИЕ,УШУ,УНИВЕРСАЛЬНЫЙ БОЙ,
ТЯЖЕЛАЯ АТЛЕТИКА,ТХЭКВОНДО МФТ,ТХЭКВОНДО ИТФ,ТХЭКВОНДО ГТФ,
ТХЭКВОНДО,ТРИАТЛОН,ТЕННИС,ТАНЦЕВАЛЬНЫЙ СПОРТ,СУМО,
СУДОМОДЕЛЬНЫЙ СПОРТ,СТРЕЛЬБА ИЗ ЛУКА,СТРЕЛЬБА ИЗ АРБАЛЕТА,
СТРАЙКБОЛ,СТЕНДОВАЯ СТРЕЛЬБА,СПОРТ СЛЕПЫХ,
СПОРТ СВЕРХЛЕГКОЙ АВИАЦИИ,СПОРТ ЛИЦ С ПОРАЖЕНИЕМ ОДА,
СПОРТ ЛИЦ С ИНТЕЛЛЕКТУАЛЬНЫМИ НАРУШЕНИЯМИ,СПОРТИВНЫЙ ТУРИЗМ,
СПОРТИВНО-ПРИКЛАДНОЕ СОБАКОВОДСТВО,СПОРТИВНОЕ ПРОГРАММИРОВАНИЕ,
СПОРТИВНОЕ ОРИЕНТИРОВАНИЕ,СПОРТИВНОЕ МЕТАНИЕ НОЖА,
СПОРТИВНАЯ ГИМНАСТИКА,СПОРТИВНАЯ БОРЬБА,СПОРТИВНАЯ АЭРОБИКА,
СПОРТИВНАЯ АКРОБАТИКА,СПОРТ ГЛУХИХ,СОФТБОЛ,СОВРЕМЕННОЕ ПЯТИБОРЬЕ,
СНОУБОРД,СМЕШАННОЕ БОЕВОЕ ЕДИНОБОРСТВО (ММА),СКЕЙТБОРДИНГ,СКВОШ
"""

# Создаем список видов спорта
sports_list = list(set([sport.strip().upper() for sport in sports_text.split(',')
                        if sport.strip() and sport.strip().upper() != 'МОЛОДЕЖНЫЙ (РЕЗЕРВНЫЙ) СОСТАВ']))


def split_text_into_records_with_sport_and_reserve(text, sports_list):
    lines = text.split('\n')
    records = []
    current_sport = None
    current_reserve = False
    current_record_lines = []

    for line in lines:
        line_stripped = line.strip()
        if not line_stripped:
            continue

        if line_stripped.upper() == 'МОЛОДЕЖНЫЙ (РЕЗЕРВНЫЙ) СОСТАВ':
            current_reserve = True
            continue

        # Проверяем, является ли строка названием вида спорта
        if line_stripped.upper() in sports_list:
            # Перед обновлением текущего вида спорта сохраняем предыдущие записи
            if current_record_lines:
                record_text = '\n'.join(current_record_lines)
                records.append({'text': record_text, 'sport': current_sport, 'reserve': current_reserve})
                current_record_lines = []
            current_sport = line_stripped.strip()
            current_reserve = False  # Сбрасываем флаг "Резерв" при новом виде спорта
            continue

        # Проверяем, является ли строка началом новой записи
        if re.match(r'^\d{13,}', line_stripped):
            # Начало новой записи
            if current_record_lines:
                # Сохраняем предыдущую запись
                record_text = '\n'.join(current_record_lines)
                records.append({'text': record_text, 'sport': current_sport, 'reserve': current_reserve})
                current_record_lines = []

        current_record_lines.append(line)

    # Добавляем последнюю запись
    if current_record_lines:
        record_text = '\n'.join(current_record_lines)
        records.append({'text': record_text, 'sport': current_sport, 'reserve': current_reserve})

    return records


def parse_record(record_text):
    lines = record_text.strip().split("\n")
    if len(lines) < 2:
        return None

    # Шаг 1: Извлечение ID и Названия мероприятия
    header = lines[0]
    match_header = re.match(r'^(\d+)\s+(.+)', header)
    if not match_header:
        return None
    id_sm = match_header.group(1)
    event_name_parts = [match_header.group(2)]

    # Собираем название мероприятия, которое может занимать несколько строк
    category_keywords = ['женщины', 'мужчины', 'юниоры', 'юниорки', 'девушки', 'юноши', 'мальчики', 'девочки']
    date_pattern = r'\d{2}\.\d{2}\.\d{4}'

    # Начинаем со второй строки
    idx = 1
    while idx < len(lines):
        line = lines[idx].strip()
        # Если строка содержит дату или категорию, прерываем сбор названия мероприятия
        if re.search(date_pattern, line) or any(kw in line.lower() for kw in category_keywords):
            break
        else:
            event_name_parts.append(line)
            idx += 1

    event_name = ' '.join(event_name_parts).strip()

    # Шаг 2: Найти строку с Категорией участников
    category = None
    while idx < len(lines):
        line = lines[idx].strip()
        if any(keyword.lower() in line.lower() for keyword in category_keywords):
            category = line.strip()
            idx += 1
            break
        idx += 1

    if category:
        category = clean_category(category)

    # Шаг 3: Ищем даты
    dates = re.findall(r'\d{2}\.\d{2}\.\d{4}', record_text)
    start_date = dates[0] if len(dates) > 0 else None
    end_date = dates[1] if len(dates) > 1 else None

    participants = extract_last_number(record_text)

    # Шаг 4: Извлекаем адрес
    address = None
    country_found = None
    for country in country_list:
        country_pattern = rf'\b{country}\b'
        match = re.search(country_pattern, record_text, re.IGNORECASE)
        if match:
            country_found = country
            pos = match.end()
            # Извлекаем текст после названия страны
            address_part = record_text[pos:]
            # Заменяем '\n' на ', '
            address_part = address_part.replace('\n', ', ')
            # Удаляем даты и число участников из адреса
            address_part = re.sub(r'\d{2}\.\d{2}\.\d{4}', '', address_part)  # Удаляем даты
            address_part = re.sub(r'\d+$', '', address_part).strip()  # Удаляем число участников
            # Удаляем лишние пробелы
            address_part = re.sub(r'\s+', ' ', address_part).strip()
            # Формируем полный адрес
            address = f"{country_found}, {address_part}" if address_part else country_found
            break

    if not address and len(dates) >= 2:
        # Попытка извлечь адрес по-другому
        second_date = dates[1]
        parts = record_text.split(second_date)
        if len(parts) > 1:
            address_part = parts[1].strip()
            address_part = re.sub(r'\d+$', '', address_part).strip()
            address_part = address_part.replace('\n', ', ')
            address = address_part if address_part else None

    # Очистка адреса от префиксов, таких как "г.", "поселок"
    if address:
        address = re.sub(r'\bг\.\s*', '', address, flags=re.IGNORECASE)
        address = re.sub(r'\bпоселок\s*', '', address, flags=re.IGNORECASE).strip()

    return {
        "№ СМ в ЕКП": id_sm,
        "Наименование мероприятия": event_name,
        "Участники": category,
        "Начало": start_date,
        "Окончание": end_date,
        "Место проведения": address,
        "Кол-во участников": participants
    }


def parse_text_to_dataframe(text):
    records = split_text_into_records_with_sport_and_reserve(text, sports_list)

    data = []
    for record in records:
        record_text = record['text']
        sport = record['sport']
        reserve = record['reserve']
        parsed = parse_record(record_text)
        if parsed:
            parsed['Вид спорта'] = sport
            parsed['Резерв'] = reserve
            data.append(parsed)

    df = pd.DataFrame(data)
    return df


def parse_file(file_path):
    # Извлекаем текст из PDF
    text = extract_text_from_pdf(file_path)

    # Преобразуем текст в DataFrame
    df = parse_text_to_dataframe(text)

    # Постобработка столбца "Место проведения"
    def remove_page_pattern(address):
        if isinstance(address, str) and 'Стр' in address:
            # Находим позицию последней запятой перед "Стр"
            last_comma_index = address.rfind(',', 0, address.find('Стр'))
            if last_comma_index != -1:
                # Обрезаем строку до этой запятой, не включая её
                address = address[:last_comma_index].strip()
            else:
                # Если запятая не найдена, обрезаем до "Стр"
                address = address[:address.find('Стр')].strip()
        return address

    df['Место проведения'] = df['Место проведения'].apply(remove_page_pattern)

    # Функция для удаления цифр из конца адреса, если они слитно соединены со словом
    def remove_trailing_digits(address):
        if isinstance(address, str):
            # Удаляем цифры, если они идут сразу после букв в конце строки
            address = re.sub(r'([А-Яа-яA-Za-z]+)\d+$', r'\1', address.strip())
        return address

    df['Место проведения'] = df['Место проведения'].apply(remove_trailing_digits)

    # Добавляем словарь замен
    changes = {
        'РОССИЯ, ХАНТЫ-МАНСИЙСКИЙ АВТОНОМНЫЙ ОКРУГ - ЮГРА, Ханты-, Мансийск': 'РОССИЯ, ХАНТЫ-МАНСИЙСКИЙ АВТОНОМНЫЙ ОКРУГ - ЮГРА, Ханты-Мансийск',
        'РОССИЯ, СВЕРДЛОВСКАЯ ОБЛАСТЬ, Верхнее Дуброво , городского типа': 'РОССИЯ, СВЕРДЛОВСКАЯ ОБЛАСТЬ, Верхнее Дуброво, поселок городского типа',
        'РОССИЯ, ПЕРМСКИЙ КРАЙ, Прикамский': 'РОССИЯ, ПЕРМСКИЙ КРАЙ, Прикамский поселок',
        'РОССИЯ, РЕСПУБЛИКА ТАТАРСТАН (ТАТАРСТАН), Богатые Сабы , городского типа': 'РОССИЯ, РЕСПУБЛИКА ТАТАРСТАН (ТАТАРСТАН), Богатые Сабы, поселок городского типа',
        'РОССИЯ, КИРОВСКАЯ ОБЛАСТЬ, Верхошижемье поселок городского, типа': 'РОССИЯ, КИРОВСКАЯ ОБЛАСТЬ, Верхошижемье поселок городского типа',
        'США, ., СОЕДИНЕННЫЕ ШТАТЫ': 'США, СОЕДИНЕННЫЕ ШТАТЫ',
        'РОССИЯ, РЕСПУБЛИКА АДЫГЕЯ (АДЫГЕЯ), Тлюстенхабль поселок, городского типа': 'РОССИЯ, РЕСПУБЛИКА АДЫГЕЯ (АДЫГЕЯ), Тлюстенхабль поселок городского типа',
        'РОССИЯ, ХАНТЫ-МАНСИЙСКИЙ АВТОНОМНЫЙ ОКРУГ - ЮГРА, , Нижневартовск': 'РОССИЯ, ХАНТЫ-МАНСИЙСКИЙ АВТОНОМНЫЙ ОКРУГ - ЮГРА, Нижневартовск',
        '- дни соревнований., 06.03.2024 - день отъезда.01.03.2024, 06.03.2024РОССИЯ, ОМСКАЯ ОБЛАСТЬ, Омск': 'РОССИЯ, ОМСКАЯ ОБЛАСТЬ, Омск',
        '- дни соревнований., 27.10.2024 - день отъезда.23.10.2024, 27.10.2024РОССИЯ, МОСКВА, Город Москва': 'РОССИЯ, МОСКВА, Город Москва',
        'КИТАЙ, ), Тайвань': 'ТАЙВАНЬ(КИТАЙ), КИТАЙ',
        'РОССИЯ, -РОДИНА ГЕРОЕВ", юниоры до 21 лет, ГРЕКО-РИМСКАЯ БОРЬБА - ВЕСОВАЯ КАТЕГОРИЯ 97 КГ, ГРЕКО-, РИМСКАЯ БОРЬБА - ВЕСОВАЯ КАТЕГОРИЯ 87 КГ, ГРЕКО-РИМСКАЯ, БОРЬБА - ВЕСОВАЯ КАТЕГОРИЯ 82 КГ, ГРЕКО-РИМСКАЯ БОРЬБА -, ВЕСОВАЯ КАТЕГОРИЯ 77 КГ, ГРЕКО-РИМСКАЯ БОРЬБА - ВЕСОВАЯ, КАТЕГОРИЯ 72 КГ, ГРЕКО-РИМСКАЯ БОРЬБА - ВЕСОВАЯ КАТЕГОРИЯ 67, КГ, ГРЕКО-РИМСКАЯ БОРЬБА - ВЕСОВАЯ КАТЕГОРИЯ 63 КГ, ГРЕКО-, РИМСКАЯ БОРЬБА - ВЕСОВАЯ КАТЕГОРИЯ 60 КГ, ГРЕКО-РИМСКАЯ, БОРЬБА - ВЕСОВАЯ КАТЕГОРИЯ 55 КГ, ГРЕКО-РИМСКАЯ БОРЬБА -, ВЕСОВАЯ КАТЕГОРИЯ 130 КГ, РОССИЯ, КРАСНОЯРСКИЙ КРАЙ, Красноярск': 'РОССИЯ, КРАСНОЯРСКИЙ КРАЙ, Красноярск',
        '- Официальная тренировка, 28.01-02.02.2024 - Могул, Парный могул, Ски-кросс, Слоуп-стайл, Биг-, эйр, 03.02.2024 - День отъезда26.01.2024, 03.02.2024РОССИЯ, КРАСНОЯРСКИЙ КРАЙ, Красноярск': 'РОССИЯ, КРАСНОЯРСКИЙ КРАЙ, Красноярск',
        '- Официальная тренировка, инспектирование трассы, жюри;, 23.02.2024 - Официальная тренировка;, 24.02.2024 - Официальная тренировка, инспектирование трассы, жюри,, Торжественная церемония открытия соревнований,, Соревнования (дисциплина – парный могул) женщины,, Соревнования (дисциплина – парный могул) мужчины,, Церемония награждения и закрытия соревнований;, 25.02.2024 - День отъезда.21.02.2024, 25.02.2024РОССИЯ, МОСКВА, Город Москва': 'РОССИЯ, МОСКВА, Город Москва',
        'ПО НАЗНАЧЕНИЮ 18': 'ПО НАЗНАЧЕНИЮ',
        'УЗБЕКИСТАН, Ташкент  Дворец Спорта "Юнусабад"8': 'УЗБЕКИСТАН, Ташкент  Дворец Спорта "Юнусабад"',
        'РОССИЯ, ", женщины от 14 лет и старше, юниорки 12-13 лет, девочки 10-11 лет, ГРУППОВОЕ УПРАЖНЕНИЕ - МНОГОБОРЬЕ, МНОГОБОРЬЕ, РОССИЯ, УЛЬЯНОВСКАЯ ОБЛАСТЬ, Ульяновск': 'РОССИЯ, УЛЬЯНОВСКАЯ ОБЛАСТЬ, Ульяновск',
        '06.05.2024РОССИЯ, МОСКВА, Город Москва': 'РОССИЯ, МОСКВА, Город Москва',
        'БЕЛАРУСЬ, - Россия, БЕЛАРУСЬ, Минск': 'БЕЛАРУСЬ, Минск',
        '22.07.2024РОССИЯ, САНКТ-ПЕТЕРБУРГ, Город Санкт-Петербург': 'РОССИЯ, САНКТ-ПЕТЕРБУРГ, Город Санкт-Петербург',
        'КАЗАХСТАН, Туран 5924': 'КАЗАХСТАН, Туран',
        'БЕЛАРУСЬ, ", женщины, мужчины от 23 лет, и старше, ТРЕК - МЭДИСОН, ТРЕК - КЕЙРИН, РОССИЯ, ОМСКАЯ ОБЛАСТЬ, Омск': 'БЕЛАРУСЬ, РОССИЯ, ОМСКАЯ ОБЛАСТЬ, Омск',
        '- дни соревнований., 17.06.2024 - день отъезда.14.06.2024, 17.06.2024РОССИЯ, ВОРОНЕЖСКАЯ ОБЛАСТЬ, Воронеж': 'РОССИЯ, ВОРОНЕЖСКАЯ ОБЛАСТЬ, Воронеж',
        '- дни соревнований., 07.07.2024 - день отъезда.01.07.2024, 07.07.2024РОССИЯ, САНКТ-ПЕТЕРБУРГ, Город Санкт-Петербург': 'РОССИЯ, САНКТ-ПЕТЕРБУРГ, Город Санкт-Петербург',
        '- соревнования,, 09.09.2024 - день отъезда05.09.2024, 09.09.2024РОССИЯ, РОСТОВСКАЯ ОБЛАСТЬ, Ростов-на-Дону': 'РОССИЯ, РОСТОВСКАЯ ОБЛАСТЬ, Ростов-на-Дону',
        '- дни соревнований, 15.01.2024 - день отъезда09.01.2024, 15.01.2024РОССИЯ, САНКТ-ПЕТЕРБУРГ, Город Санкт-Петербург': 'РОССИЯ, САНКТ-ПЕТЕРБУРГ, Город Санкт-Петербург',
        '- дни соревнования., 03.07.2024 - день отъезда.29.06.2024, 03.07.2024РОССИЯ, ТУЛЬСКАЯ ОБЛАСТЬ, Тула ': 'РОССИЯ, ТУЛЬСКАЯ ОБЛАСТЬ, Тула',
        '- дни соревнований., 11.08.2024 - день отъезда.05.08.2024, 11.08.2024РОССИЯ, САНКТ-ПЕТЕРБУРГ, Город Санкт-Петербург': 'РОССИЯ, САНКТ-ПЕТЕРБУРГ, Город Санкт-Петербург',
        '- соревнования, 20.04.2024 - день отъезда16.04.2024, 20.04.2024РОССИЯ, ТУЛЬСКАЯ ОБЛАСТЬ, Тула': 'РОССИЯ, ТУЛЬСКАЯ ОБЛАСТЬ, Тула',
        'ПО НАЗНАЧЕНИЮ 25': 'ПО НАЗНАЧЕНИЮ',
    }

    # Функция для обработки адреса
    def process_address(address):
        if isinstance(address, str):
            # Если в адресе есть 'Основной состав'
            if 'Основной состав' in address:
                # Проверяем, есть ли перед ним число
                if re.search(r'\d+\s*,?\s*Основной состав', address):
                    # Удаляем 'Основной состав' и ближайшую запятую или пробел перед ним
                    address = re.sub(r'(,\s*)?Основной состав', '', address).strip()
            # Удаляем цифры, если они идут сразу после букв в конце строки (слитно)
            address = re.sub(r'([А-Яа-яA-Za-z]+)\d+$', r'\1', address)
            # Удаляем цифры, если они отделены пробелом в конце строки
            address = re.sub(r'\s*\d+\s*$', '', address)
            # Применяем замены из словаря
            address = changes.get(address.strip(), address.strip())
        return address

    df['Место проведения'] = df['Место проведения'].apply(process_address)
    df = df.dropna()
    df = df.reset_index(drop=True)

    # Добавляем столбец "Тип соревнования"
    sport_types_list = ['МЕЖРЕГИОНАЛЬНЫЕ', 'ПЕРВЕНСТВО', 'ЧЕМПИОНАТ', 'ОЛИМПИЙСКИЕ ИГРЫ', 'КУБОК',
                        'СПАРТАКИАДА', 'УТМ', 'МЕЖДУНАРОДН', 'ЭТАП КУБКА', 'ВСЕРОССИЙСК', 'УЧЕБНО-ТРЕНИРОВОЧН',
                        'ПАРАЛИМПИЙСКИЕ ИГРЫ']

    def determine_sport_type(event_name):
        if isinstance(event_name, str):
            event_name_upper = event_name.upper()
            for word in sport_types_list:
                if word == 'ВСЕРОССИЙСК':
                    if re.search(r'\b' + re.escape(word), event_name_upper):
                        return 'ВСЕРОССИЙСКИЙ'
                elif word == 'УЧЕБНО-ТРЕНИРОВОЧН':
                    if re.search(r'\b' + re.escape(word), event_name_upper):
                        return 'УЧЕБНО-ТРЕНИРОВОЧНЫЙ'
                elif word == 'МЕЖДУНАРОДН':
                    if re.search(r'\b' + re.escape(word), event_name_upper):
                        return 'МЕЖДУНАРОДНЫЙ'
                else:
                    if re.search(r'\b' + re.escape(word), event_name_upper):
                        return word
        return 'Остальные'

    df['Тип соревнования'] = df['Наименование мероприятия'].apply(determine_sport_type)

    # Переменная с подготовленным DataFrame
    age_categories = [{'group': 'Мальчики, девочки',
                       'min_age': 9,
                       'max_age': 11,
                       'isu': 'Juniors D',
                       'evsk': 'до 13 лет'},
                      {'group': 'Юноши, девушки младшего возраста',
                       'min_age': 12,
                       'max_age': 13,
                       'isu': None,
                       'evsk': None},
                      {'group': 'Юноши, девушки среднего возраста',
                       'min_age': 14,
                       'max_age': 15,
                       'isu': 'Juniors C',
                       'evsk': '13 - 17 лет'},
                      {'group': 'Юноши, девушки старшего возраста',
                       'min_age': 16,
                       'max_age': 17,
                       'isu': 'Juniors B',
                       'evsk': None},
                      {'group': 'Юниоры, юниорки',
                       'min_age': 18,
                       'max_age': 19,
                       'isu': 'Juniors A',
                       'evsk': '14 - 19 лет'},
                      {'group': 'Мужчины, женщины',
                       'min_age': 19,
                       'max_age': 100,
                       'isu': 'Seniors',
                       'evsk': '19 лет и старше'},
                      {'group': 'Юноши, девушки',
                       'min_age': 12,
                       'max_age': 17,
                       'isu': None,
                       'evsk': '12 - 17 лет'}]

    df['Начало'] = pd.to_datetime(df['Начало'], format='%d.%m.%Y')
    df['Окончание'] = pd.to_datetime(df['Окончание'], format='%d.%m.%Y')

    # Извлечение месяца и года проведения соревнования
    df['Месяц'] = df['Начало'].dt.month_name()
    df['Год'] = df['Начало'].dt.year

    def extract_min_max_age(category):
        """
        Извлекает минимальный и максимальный возраст из строки категории участников
        с использованием age_categories и дополнительных проверок.
        """
        # Если категория совпадает с таблицей age_categories
        for group in age_categories:
            if group["group"].lower() in category.lower():
                return group["min_age"], group["max_age"]  # Возвращаем минимальный и максимальный возраст

        # Если указан диапазон (например, 9 - 13 лет)
        match_range = re.search(r'(\d+)\s*-\s*(\d+)\s+лет', category)
        if match_range:
            return int(match_range.group(1)), int(match_range.group(2))  # Возвращаем нижний и верхний предел диапазона

        # Если указано "до X лет"
        match_to = re.search(r'до\s+(\d+)\s+лет', category)
        if match_to:
            return 0, int(match_to.group(1))  # Возвращаем минимальный возраст 0 и максимальный возраст

        # Если указан возраст "от X лет"
        match_from = re.search(r'от\s+(\d+)\s+лет', category)
        if match_from:
            return int(
                match_from.group(1)), None  # Возвращаем минимальный возраст и None для неограниченного максимального

        # Обработка категорий "женщины", "мужчины", "юноши", "девушки"
        if any(keyword in category.lower() for keyword in ['юноши', 'девушки']):
            return 12, 17  # Минимальный возраст 12, максимальный 17 для "юноши" и "девушки"

        if any(keyword in category.lower() for keyword in ['женщины', 'мужчины']):
            return 19, 100  # Минимальный возраст 19, максимальный возраст не ограничен

        # Если ничего не найдено
        return 0, 100

    # Применение функции
    df['Минимальный возраст'], df['Максимальный возраст'] = zip(*df['Участники'].apply(extract_min_max_age))
    df['Минимальный возраст'] = df['Минимальный возраст'].fillna(0).astype(int)
    df['Максимальный возраст'] = df['Максимальный возраст'].fillna(0).astype(int)

    def extract_gender(category):
        """
        Определяет пол участников на основе ключевых слов в строке категории.
        Возвращает 'Мужской', 'Женский' или 'Смешанный'.
        """
        category_lower = category.lower()

        # Ключевые слова для мужчин и мальчиков
        male_keywords = ['мужчины', 'юноши', 'мальчики', 'юниоры']
        # Ключевые слова для женщин и девочек
        female_keywords = ['женщины', 'девушки', 'девочки', 'юниорки']

        # Проверка на наличие слов обоих полов
        has_male = any(keyword in category_lower for keyword in male_keywords)
        has_female = any(keyword in category_lower for keyword in female_keywords)

        # Если есть упоминание обоих полов
        if has_male and has_female:
            return 'Смешанный'

        if has_male:
            return 'Мужской'

        if has_female:
            return 'Женский'

        return 'Смешанный'

    # Применяем функцию к категории участников и создаем новый столбец
    df['Пол'] = df['Участники'].apply(extract_gender)

    df['Начало'] = df['Начало'].dt.strftime('%Y-%m-%d')
    df['Окончание'] = df['Окончание'].dt.strftime('%Y-%m-%d')
    cols = ['Вид спорта', 'Место проведения', 'Участники', 'Пол', 'Тип соревнования', 'Начало', 'Окончание',
            '№ СМ в ЕКП', 'Наименование мероприятия', 'Кол-во участников', 'Резерв', 'Месяц', 'Год',
            'Минимальный возраст', 'Максимальный возраст']
    df = df[cols]

    return df
